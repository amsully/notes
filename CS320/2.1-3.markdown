# 2.1 Software Processes

## 2.1.1 Processes and Process Models

## 2.1.2 Component Software Processes

- development process: specifies the development and quality assurance activities that need to be performed
- management process: specifies how to plan and control these activities so that cost, schedule quality, and othe objectives are met


		Software Process 
		/		\
	Product Eng.		Process Mngt Proceess
	Process
[Dev Process, Project Mngt Process,
Software Configuration Management Process]

## 2.1.3 ETVX Approach for Process Specification

- end of each 'phase' regardless of process must be a work product (document, code, etc)
- the specification for entry criteria:
	- ETVX
	- Entry Criteria, Task, Verification, Exit Criteria

# 2.2 Desired Characteristics of Software Process

## 2.2.1 Predictability

- Gain experience by following a defined process that can be repeatable for future processes when developing

- a predictable process forms the backbone of the software engineering methods

## 2.2.2 Support Testability and Maintainability

- Requirements: 10%
- Design: 10%
- Coding: 30%
- testing: 50%

Bell Labs study:

- Writing Programs 13%
- Reading Programs and Manuals 16%
- Job Communication 32%
- Other 39%

## 2.2.3 Support Change

Processes that can handle changes are needed as change is inevitable

## 2.2.4 Early Defect Removal

Error Frequency

- Requirements: 20%
- Design: 30%
- Coding: 50%

- Error cost multiplies as it moves through the development phase.
	- QC or quality control activity is one whoe main purpose is to identify and remove defects

## 2.2.5 Process Improvement and Feedback

Processes should be closed loops and provide positive feedback for the next round of processes.
































# 2.3 Software Development Process Models

- focus on design, coding, testing

## 2.3.1 Waterfall Model

- Linear ordering - at the end of each 'phase' a product should be produced (to define different phases)

- What is produced:
	- Requirements docs
	- Project Plan
	- Design Documents
	- Test plan and test reports
	- Final code
	- Software manuals (user, installation, etc)

Limitations

- assumes requirements can be frozen
- freezing req. usually requires choosing hardware -- could be outdated by time project is finished
- "big bang" approach - heavy risk when final code is outputted at end.
- Document driven process that requires formal documentss at the end of each phase

Figure 2.5 Page 39 - Diagram of waterfall method

## 2.3.2 Prototyping

- throwaway prototype developed to understand problem
	- must be developed at a low cost

[ Requirement Analysis -> Design -> Code -> Test ]
-> Design
-> Code
-> Test

Overall when designing a program not properly understood prototyping works better than waterfall.

## 2.3.3 Iterative Development

- Processes develop a small part of the program and processes are repeated until full program is developed

Iterative Enhancement Model

Figure Page 44

- design -> implement -> analyze 

Spiral Model

each cycle in the spiral begins with identification of objectives for that cycle, and the constrains that exist (benchmarking simulation prototyping)

Next, software is developed, keeping in mind the risks.

Next stage is planned 

## 2.3.4 Timeboxing Model

Iterations begin before system produced by current iteration is released.

- Unit is a 'time box' which is of fixed duration 
- The key factor in selecting the requirements to be built in the time box is what can be fit ... changes perspective of development and makes the schedule non-negotiable and a high priority commitment

- Teams are separated by stages .. only one team works on one stage

Figure 2.9 Page 48

Comparison of all models:

Figure 2.11 Page 51













